; Copyright (c) 2018-20 Kaarel Sikk, CÂ²DH, University of Luxembourg
; Licensed under the Creative Commons
; Attribution-NonCommercial-ShareAlike 4.0 License
; See Info tab for full copyright and license information
;
; Setup and functions of resources related functions

; Resource regrowth on all patches
; Is not based on any empirical studies
; in the future it could make sense to make it seasonal
to regrow-harvest
  ; during growth season grow back
  let regrow-patches patches with [harvested > 0]
  ask regrow-patches [
    ; to optimize for speed we regrow only after every nr of ticks
    set harvested (harvested - (regrowth-rate * energy * regrow-after-ticks))
    if harvested < 0 [
      set harvested 0 
    ]
    set active-energy energy - harvested
    
    set tmp-recalc 1
    
  ]
  
end

; Agent harvests surrounding areas
to harvest [a]
  ; energy rate for period of a tick - 
  ; toharvest - how much energy must be harvested during this tick
  let toharvest population * energy-per-person
  
  ; Extract energy from closest patches to the agent a until all energy is gained
  let c-patch ([patch-here] of a)
  let vicinity patches in-radius (max-logistic-move)
  
  let moved 0
  let dist 0
  while [toharvest > 0]
  [
    
    let target-patch max-one-of vicinity [active-energy * (8 - (2 * distance a * patch-size-km / forage-speed) ) / 8]
    
    ifelse target-patch = nobody [
      print "Died of no resources"
      set toharvest 0
      die
    ]
    [
      
      ; BY all patches harvest resources
      ask target-patch [
        ; time moved - we assume that resources keep for a tick time, so there is only one logistic foray (not eg. every day) made to every other cell
        ; for simplification (summed foraging costs, not individual)
        set dist distance a
        set moved moved + distance a
        if active-energy < 0.01 [
          print "Died of no resources"
          set toharvest 0
          ask a [ die ]
          stop
        ]
        
        ; let's see when we try to get all here
        let harvested_tmp harvested + toharvest
        
        ; if we wanted more than there is on a given patch
        ifelse harvested_tmp > (energy - harvested) [
          ; we still need all we have got
           
          ;as this is return rate, so it depleted slowly, similar curve in Kelly: 100
          set toharvest toharvest - (energy - harvested)
          set harvested harvested + ((energy - harvested) * depletion-rate)
          
          
        ]
        ; we wanted less than there is
        [
          ;as this is return rate, so it depleted slowly, similar curve in Kelly: 100
          set harvested harvested + (toharvest * depletion-rate)
          set toharvest 0
        ]
        set active-energy (energy - harvested)
        set tmp-recalc 1
        ask a [
          if notmoved = 1 OR dist > last-foraging-radius [
            set tmp-foraging-radius dist
          ]
        ]
      ]
    ] 
  ]
  set log-mobility-turn moved
end
